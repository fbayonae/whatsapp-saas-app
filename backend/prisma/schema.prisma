generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "whatsapp"]
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  passwordHash  String
  name          String
  role          String    @default("user") // puede ser "admin", "user", etc.
  createdAt     DateTime  @default(now())

  loginAttempts LoginAttempt[]
  sessions      Session[]
  
  @@map("users")
  @@schema("auth")
}

model LoginAttempt {
  id        Int      @id @default(autoincrement())
  email     String
  success   Boolean
  ip        String
  userAgent String?
  createdAt DateTime @default(now())

  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])

  @@map("login_attempts")
  @@schema("auth")
}

model Session {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime

  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  revoked   Boolean  @default(false)

  @@map("sessions")
  @@schema("auth")
}

model RefreshToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  revoked    Boolean  @default(false)

  @@map("refresh_tokens")
  @@schema("auth")
}


model Template {
  id          Int         @id @default(autoincrement())
  name        String
  category    String
  language    String
  status      String
  id_meta     String      @unique
  createdAt   DateTime    @default(now())

  components  Component[]

  @@map("templates")
  @@schema("whatsapp")
}

model Component {
  id          Int        @id @default(autoincrement())
  type        String     // header, body, footer, button, etc.
  format      String
  text        String
  templateId  Int

  template    Template   @relation(fields: [templateId], references: [id])
  buttons     Button[]

  @@map("components")
  @@schema("whatsapp")
}

model Button {
  id           Int        @id @default(autoincrement())
  type         String     // quick_reply, url, call_to_action, etc.
  text         String
  url          String?
  componentId  Int

  component    Component  @relation(fields: [componentId], references: [id])

  @@map("buttons")
  @@schema("whatsapp")
}

model Contact {
  id          Int       @id @default(autoincrement())
  name        String
  phoneNumber String     @unique
  createdAt   DateTime   @default(now())

  conversations Conversation[]

  @@map("contacts")
  @@schema("whatsapp")
}

model Conversation {
  id             Int       @id @default(autoincrement())
  contactId      Int
  startedAt      DateTime  @default(now())
  lastMessageAt  DateTime?

  contact    Contact   @relation(fields: [contactId], references: [id])
  messages   Message[]

  @@map("conversations")
  @@schema("whatsapp")
}

model Message {
  id             Int       @id @default(autoincrement())
  id_meta        String
  content        String
  type           String
  status         String    @default("sent")
  contextId      String?
  direction      String    // 'inbound' o 'outbound'
  media_id       String?
  media_mimeType String?
  media_sha256   String?
  createdAt      DateTime  @default(now())
  timestamp      DateTime?
  conversationId Int

  conversation   Conversation @relation(fields: [conversationId], references: [id])

  @@map("messages")
  @@schema("whatsapp")
}
