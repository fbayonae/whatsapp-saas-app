generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "whatsapp"]
}

model AdminUser {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  name         String
  passwordHash String
  role         String   @default("superadmin") // Puedes extender a otros roles admin
  createdAt    DateTime @default(now())

  @@map("adminusers")
  @@schema("auth")
}

model Tenant {
  id                Int     @id @default(autoincrement())
  name              String
  slug              String   @unique
  domain            String?  // e.g. empresa1.tudominio.com
  phoneId           String?
  token             String?
  wa_businessId     String?
  wa_versionGraph   String?   
  wa_tokendev       String?
  wa_verify_token   String?
  wa_phone_number   String?
  createdAt     DateTime @default(now())

  users         User[]
  limits        TenantLimit[] 

  @@map("tenants")
  @@schema("auth")
}

model TenantLimit {
  id         Int     @id @default(autoincrement())
  tenantId   Int     @unique
  maxUsers   Int     @default(5)
  maxContacts Int    @default(1000)
  maxMessagesPerMonth Int @default(1500)

  tenant     Tenant  @relation(fields: [tenantId], references: [id])

  @@map("tenant_limits")
  @@schema("auth")
}


model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  passwordHash  String
  name          String
  role          String    @default("user") // puede ser "admin", "user", etc.
  createdAt     DateTime  @default(now())

  tenantId      Int?
  tenant        Tenant?    @relation(fields: [tenantId], references: [id])

  loginAttempts LoginAttempt[]
  sessions      Session[]
  refreshTokens RefreshToken[]

  @@index([tenantId])
  
  @@map("users")
  @@schema("auth")
}

model LoginAttempt {
  id            Int      @id @default(autoincrement())
  email         String
  success       Boolean
  ip            String
  userAgent     String?
  locationInfo  String?
  browser       String?
  os            String?
  createdAt     DateTime @default(now())

  userId        Int?
  user          User?    @relation(fields: [userId], references: [id])

  @@index([email])
  @@index([userId])

  @@map("login_attempts")
  @@schema("auth")
}

model Session {
  id            Int      @id @default(autoincrement())
  token         String   @unique
  createdAt     DateTime @default(now())
  expiresAt     DateTime
  userAgent     String
  ip            String
  locationInfo  String?
  browser       String?
  os            String?
  refreshToken  String 

  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  revoked   Boolean  @default(false)

  @@index([userId])
  @@index([refreshToken])

  @@map("sessions")
  @@schema("auth")
}

model RefreshToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  createdAt  DateTime @default(now())
  expiresAt  DateTime

  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  revoked    Boolean  @default(false)

  @@index([userId, revoked])

  @@map("refresh_tokens")
  @@schema("auth")
}

model Preference {
  id                Int      @id @default(autoincrement())
  name              String   @unique
  filemakerHost     String?
  filemakerPort     Int?
  filemakerDatabase String?
  filemakerUser     String?
  filemakerPass     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("preferences")
  @@schema("whatsapp")
}

model Template {
  id          Int         @id @default(autoincrement())
  name        String
  category    String
  language    String
  status      String
  rejectionReason      String?
  quality     String?
  qualityPrev String?
  id_meta     String      @unique
  createdAt   DateTime    @default(now())

  components  Component[]
  campaigns Campaign[] @relation("TemplateCampaigns")

  @@index([status])

  @@map("templates")
  @@schema("whatsapp")
}

model Component {
  id          Int        @id @default(autoincrement())
  type        String     // header, body, footer, button, etc.
  format      String
  text        String
  example     Json?
  templateId  Int

  template    Template   @relation(fields: [templateId], references: [id])
  buttons     Button[]

  @@map("components")
  @@schema("whatsapp")
}

model Button {
  id           Int        @id @default(autoincrement())
  type         String     // quick_reply, url, call_to_action, etc.
  text         String
  url          String?
  example      Json?
  componentId  Int

  component    Component  @relation(fields: [componentId], references: [id])

  @@map("buttons")
  @@schema("whatsapp")
}

model Contact {
  id          Int       @id @default(autoincrement())
  name        String
  phoneNumber String     @unique
  createdAt   DateTime   @default(now())

  conversations Conversation[]
  campaigns CampaignContact[] @relation("ContactCampaigns")
 
  @@index([phoneNumber])

  @@map("contacts")
  @@schema("whatsapp")
}

model Conversation {
  id             Int       @id @default(autoincrement())
  contactId      Int
  startedAt      DateTime  @default(now())
  lastMessageAt  DateTime?

  contact    Contact   @relation(fields: [contactId], references: [id])
  messages   Message[]

  @@index([contactId])

  @@map("conversations")
  @@schema("whatsapp")
}

model Message {
  id             Int       @id @default(autoincrement())
  id_meta        String
  content        String
  type           String
  status         String    @default("pending")
  contextId      String?
  direction      String    // 'inbound' o 'outbound'
  media_id       String?
  media_mimeType String?
  media_sha256   String?
  header_type    String?
  header         String?
  footer         String?
  action         Json?
  metadata       Json?
  interactive    Json?
  origin         String    @default("web")
  createdAt      DateTime  @default(now())
  timestamp      DateTime?
  conversationId Int

  conversation   Conversation @relation(fields: [conversationId], references: [id])
  campaignReference CampaignContact[] @relation("MessageCampaigns")

  @@index([conversationId, timestamp])
  @@index([id_meta])
  @@index([type])
  @@index([status])
  
  @@map("messages")
  @@schema("whatsapp")
}

model Campaign {
  id          Int               @id @default(autoincrement())
  name        String
  templateId  Int
  status      String            @default("draft")
  createdAt   DateTime          @default(now())

  template Template @relation("TemplateCampaigns", fields: [templateId], references: [id])
  contacts    CampaignContact[]

  @@index([status])

  @@map("campaigns")
  @@schema("whatsapp")
}

model CampaignContact {
  id          Int       @id @default(autoincrement())
  campaignId  Int
  contactId   Int
  status      String     @default("pending")
  errorMsg    String?
  messageId   Int?

  campaign    Campaign    @relation(fields: [campaignId], references: [id])
  contact     Contact     @relation("ContactCampaigns", fields: [contactId], references: [id])
  message     Message?    @relation("MessageCampaigns", fields: [messageId], references: [id])

  @@index([campaignId])
  @@index([contactId])
  @@index([status])

  @@map("campaign_contacts")
  @@schema("whatsapp")
}

